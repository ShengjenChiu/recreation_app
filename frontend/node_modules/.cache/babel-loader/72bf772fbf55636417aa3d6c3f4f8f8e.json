{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\"; //function of the cumston hook useApplicationData\n\nexport default function useApplicationData() {\n  _s();\n\n  const [state, setState] = useState({\n    day: \"Monday\",\n    days: [],\n    appointments: {},\n    interviewers: {}\n  });\n  console.log('----------');\n  console.log('testo');\n  console.log('----------'); //To update the day state and retainning the state for days and appointments and \n  //to create new objects to be called to update the state with new day\n\n  const setDay = day => setState({ ...state,\n    day\n  }); // use effect to axios request data from API\n  // and receive response from API\n\n\n  useEffect(() => {\n    Promise.all([axios.get(\"/api/days\"), axios.get(\"/api/appointments\"), axios.get(\"/api/interviewers\")]).then(all => {\n      setState(prev => ({ ...prev,\n        days: all[0].data,\n        appointments: all[1].data,\n        interviewers: all[2].data\n      }));\n    });\n  }, []); //keep track of correct and updated number of interview spots available \n\n  function spotsAvailDay(newState, newAppointments) {\n    //iterate all days from Monday to Friday\n    //and return all updated spots for all weekdays\n    return newState.days.map(day => {\n      let spotsAvail = 0; //go thru all of the appointments during that particular one day \n\n      for (let id of day.appointments) {\n        //if the interview object of that one appointment is null\n        if (!newAppointments[id].interview) {\n          spotsAvail++;\n        }\n      } //return the updated number of spots for one weekday\n\n\n      return { ...day,\n        spots: spotsAvail\n      };\n    });\n  } //change the local state to book an interview \n\n\n  function bookInterview(id, interview) {\n    //received the individual appointment\n    const appointment = { ...state.appointments[id],\n      interview: { ...interview\n      }\n    }; //place the individual appointment into\n    //the appointments object\n\n    const appointments = { ...state.appointments,\n      [id]: appointment\n    }; //array of days objects with updated spots\n\n    const days = spotsAvailDay(state, appointments); //send to api database and update appointments and days states.\n\n    return axios.put(`/api/appointments/${id}`, {\n      interview\n    }).then(() => {\n      setState({ ...state,\n        appointments,\n        days\n      });\n    });\n  } //change the local state to cancel an interview\n\n\n  function cancelInterview(id) {\n    //let the individual appointment\n    //have a null interview\n    const appointment = { ...state.appointments[id],\n      interview: null\n    }; //place the individual appointment into\n    //the appointments object\n\n    const appointments = { ...state.appointments,\n      [id]: appointment\n    }; //array of days objects with updated spots\n\n    const days = spotsAvailDay(state, appointments); //return the updated appointment\n    //back to api database\n    //and update the local appointments object\n\n    return axios.delete(`/api/appointments/${id}`).then(() => {\n      setState({ ...state,\n        appointments,\n        days\n      });\n    });\n  } //return all useApplicationData's objects\n\n\n  return {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview\n  };\n}\n\n_s(useApplicationData, \"pvJcjg+OhbrrgB123nx66gFtof4=\");","map":{"version":3,"names":["useState","useEffect","axios","useApplicationData","state","setState","day","days","appointments","interviewers","console","log","setDay","Promise","all","get","then","prev","data","spotsAvailDay","newState","newAppointments","map","spotsAvail","id","interview","spots","bookInterview","appointment","put","cancelInterview","delete"],"sources":["/Users/shengjenchiu/Lighthouse-Labs-June/final_project/test/front/src/hooks/useApplicationData.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n//function of the cumston hook useApplicationData\nexport default function useApplicationData() {\n  const [state, setState] = useState({\n    day: \"Monday\",\n    days: [],\n    appointments: {},\n    interviewers: {}\n  });\n  \n  console.log('----------');\n  console.log('testo');\n  console.log('----------');\n\n  //To update the day state and retainning the state for days and appointments and \n  //to create new objects to be called to update the state with new day\n  const setDay = day => setState({ ...state, day });\n\n  // use effect to axios request data from API\n  // and receive response from API\n  useEffect(() => {\n    Promise.all([\n      axios.get(\"/api/days\"),\n      axios.get(\"/api/appointments\"),\n      axios.get(\"/api/interviewers\")\n    ])\n    .then(all => {\n      setState(prev => ({\n        ...prev, \n        days: all[0].data,\n        appointments: all[1].data,\n        interviewers: all[2].data\n      }));\n    });\n  }, []);\n\n  //keep track of correct and updated number of interview spots available \n  function spotsAvailDay(newState, newAppointments) {\n    //iterate all days from Monday to Friday\n    //and return all updated spots for all weekdays\n    return newState.days.map((day) => {\n      let spotsAvail = 0;\n      \n      //go thru all of the appointments during that particular one day \n      for (let id of day.appointments) {\n        //if the interview object of that one appointment is null\n        if (!newAppointments[id].interview) {\n          spotsAvail++;\n        }\n      }\n\n      //return the updated number of spots for one weekday\n      return { ...day, spots: spotsAvail };\n    });\n\n  }\n\n\n  //change the local state to book an interview \n  function bookInterview(id, interview) {\n\n    //received the individual appointment\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n\n    //place the individual appointment into\n    //the appointments object\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n    \n    //array of days objects with updated spots\n    const days = spotsAvailDay(state, appointments)\n\n    //send to api database and update appointments and days states.\n    return axios.put(`/api/appointments/${id}`, { interview })\n    .then(() => {\n      setState({ ...state, appointments, days });\n    });\n  }\n\n  //change the local state to cancel an interview\n  function cancelInterview(id) {\n    //let the individual appointment\n    //have a null interview\n    const appointment = {\n      ...state.appointments[id],\n      interview: null\n    };\n\n    //place the individual appointment into\n    //the appointments object\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n    \n    //array of days objects with updated spots\n    const days = spotsAvailDay(state, appointments);\n\n    //return the updated appointment\n    //back to api database\n    //and update the local appointments object\n    return axios.delete(`/api/appointments/${id}`)\n    .then(() => {\n      setState({...state, appointments, days });\n    });\n  \n  }\n\n  //return all useApplicationData's objects\n  return { \n           state,\n           setDay,\n           bookInterview,\n           cancelInterview\n         };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}